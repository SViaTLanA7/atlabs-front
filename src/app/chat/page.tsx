// src/app/chat/page.tsx
"use client";

import { useEffect, useMemo, useRef, useState } from "react";
import { chatList, chatSave, chatClear, type ChatMsg } from "@/lib/chat";
import MessageBubble from "@/components/chat/MessageBubble";

export default function ChatPage() {
    const [msgs, setMsgs] = useState<ChatMsg[]>([]);
    const [text, setText] = useState("");
    const [pending, setPending] = useState(false);
    const [files, setFiles] = useState<File[]>([]);
    const fileRef = useRef<HTMLInputElement>(null);
    const bottomRef = useRef<HTMLDivElement>(null);

    useEffect(() => {
        setMsgs(chatList().length ? chatList() : seed());
    }, []);

    useEffect(() => {
        chatSave(msgs);
        bottomRef.current?.scrollIntoView({ behavior: "smooth" });
    }, [msgs]);

    const send = async () => {
        if (!text.trim() && files.length === 0) return;
        const user: ChatMsg = {
            id: crypto.randomUUID(),
            role: "user",
            content: text,
            ts: Date.now(),
            files: files.map((f) => ({ name: f.name, size: f.size })),
        };
        setMsgs((m) => [...m, user]);
        setText("");
        setFiles([]);
        setPending(true);

        // –ú–æ–∫ –æ—Ç–≤–µ—Ç–∞ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        const reply: ChatMsg = {
            id: crypto.randomUUID(),
            role: "assistant",
            ts: Date.now() + 1000,
            content:
                "–ü—Ä–∏–Ω—è–ª. –Ø —Ä–∞–∑–±–µ—Ä—É –∑–∞–¥–∞—á—É –ø–æ —à–∞–≥–∞–º: 1) —É—Ç–æ—á–Ω—é —É—Å–ª–æ–≤–∏–µ, 2) –≤—ã–±–µ—Ä—É –º–µ—Ç–æ–¥ —Ä–µ—à–µ–Ω–∏—è, 3) –ø–æ—è—Å–Ω—é –∫–∞–∂–¥–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, 4) –ø—Ä–æ–≤–µ—Ä—é –∏—Ç–æ–≥. –ú–æ–∂–µ—à—å –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏.",
        };

        await new Promise((r) => setTimeout(r, 1000));
        setMsgs((m) => [...m, reply]);
        setPending(false);
    };

    const onFiles = (e: React.ChangeEvent<HTMLInputElement>) => {
        const list = e.target.files;
        if (!list) return;
        setFiles((prev) => [...prev, ...Array.from(list)]);
        if (fileRef.current) fileRef.current.value = "";
    };

    const removeFile = (name: string) => {
        setFiles((prev) => prev.filter((f) => f.name !== name));
    };

    const quick = (prompt: string) => {
        setText((t) => (t ? t + "\n" + prompt : prompt));
    };

    const hasMsgs = useMemo(() => msgs.length > 0, [msgs]);

    return (
        <main className="container-1160 px-4 py-8">
            <header className="mb-4 flex items-center justify-between">
                <h1 className="h1 text-[28px]">–ß–ê–¢ –° ASSISTANT</h1>
                <button className="btn btn-secondary" onClick={() => { chatClear(); setMsgs(seed()); }}>
                    –û—á–∏—Å—Ç–∏—Ç—å –¥–∏–∞–ª–æ–≥
                </button>
            </header>

            <div className="card p-4 min-h-[60vh] flex flex-col gap-3">
                <div className="space-y-3">
                    {hasMsgs ? (
                        msgs.map((m) => <MessageBubble key={m.id} msg={m} />)
                    ) : (
                        <div className="text-[var(--muted)]">–ù–∞—á–Ω–∏ –¥–∏–∞–ª–æ–≥ ‚Äî —è –ø–æ–º–æ–≥—É.</div>
                    )}
                    <div ref={bottomRef} />
                </div>

                {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
                <div className="mt-2 flex flex-wrap gap-2">
                    <button className="chip" onClick={() => quick("–û–±—ä—è—Å–Ω–∏ –ø—Ä–æ—â–µ, –∫–∞–∫ –¥–ª—è –Ω–æ–≤–∏—á–∫–∞")}>
                        –û–±—ä—è—Å–Ω–∏ –ø—Ä–æ—â–µ
                    </button>
                    <button className="chip" onClick={() => quick("–°–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–∏–π –∫–æ–Ω—Å–ø–µ–∫—Ç –ø–æ –ø—É–Ω–∫—Ç–∞–º")}>
                        –ö–æ–Ω—Å–ø–µ–∫—Ç
                    </button>
                    <button className="chip" onClick={() => quick("–ü—Ä–∏–≤–µ–¥–∏ –ø—Ä–∏–º–µ—Ä —Å —á–∏—Å–ª–∞–º–∏ –∏ –ø—Ä–æ–≤–µ—Ä—å –æ—Ç–≤–µ—Ç")}>
                        –ü—Ä–∏–º–µ—Ä –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞
                    </button>
                </div>
            </div>

            {/* Composer */}
            <div className="mt-4 card p-3">
                <div className="flex items-start gap-3">
          <textarea
              value={text}
              onChange={(e) => setText(e.target.value)}
              placeholder="–ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤—Å—Ç–∞–≤—å —É—Å–ª–æ–≤–∏–µ –∑–∞–¥–∞—á–∏‚Ä¶"
              className="flex-1 rounded-[10px] bg-[var(--bg-input)] text-white placeholder:text-[var(--muted)] px-3 py-2 outline-none resize-y min-h-[80px]"
              disabled={pending}
          />
                    <div className="flex flex-col gap-2">
                        <button
                            className="btn btn-secondary"
                            onClick={() => fileRef.current?.click()}
                            disabled={pending}
                            title="–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª"
                        >
                            üìé –§–∞–π–ª
                        </button>
                        <button
                            className="btn btn-primary"
                            onClick={send}
                            disabled={pending}
                            title="–û—Ç–ø—Ä–∞–≤–∏—Ç—å"
                        >
                            {pending ? "–û—Ç–ø—Ä–∞–≤–ª—è—é‚Ä¶" : "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"}
                        </button>
                    </div>
                </div>

                <input
                    type="file"
                    multiple
                    ref={fileRef}
                    onChange={onFiles}
                    className="hidden"
                    accept=".png,.jpg,.jpeg,.pdf,.doc,.docx,.txt"
                />

                {files.length > 0 && (
                    <div className="mt-2 flex flex-wrap gap-2">
                        {files.map((f) => (
                            <div
                                key={f.name + f.size}
                                className="px-2 py-1 rounded-lg bg-white/8 text-white text-sm flex items-center gap-2"
                            >
                                <span className="truncate max-w-[200px]">{f.name}</span>
                                <button
                                    className="text-white/70 hover:text-white"
                                    onClick={() => removeFile(f.name)}
                                >
                                    ‚úï
                                </button>
                            </div>
                        ))}
                    </div>
                )}
            </div>
        </main>
    );
}

function seed(): ChatMsg[] {
    return [
        {
            id: crypto.randomUUID(),
            role: "assistant",
            content:
                "–ü—Ä–∏–≤–µ—Ç! –Ø StudyFlow. –ü—Ä–∏—à–ª–∏ —É—Å–ª–æ–≤–∏–µ –∑–∞–¥–∞—á–∏ –∏–ª–∏ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å ‚Äî —Ä–∞–∑–±–µ—Ä—ë–º –ø–æ —à–∞–≥–∞–º. –ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ.",
            ts: Date.now(),
        },
    ];
}
